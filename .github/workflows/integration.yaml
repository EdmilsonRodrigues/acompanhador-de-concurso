name: Continuous Integration Pipeline

on: [push, pull_request]

jobs:
  ci-test:
    name: Run tests on python module ${{ matrix.service }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          "serviÃ§o-scraper",
          "backend-service"
        ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Cache Poetry
        uses: actions/cache@v4
        id: cache-poetry
        with:
          path: /opt/pipx/venvs/poetry/
          key: poetry-venv-python-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            poetry-venv-python-${{ steps.setup-python.outputs.python-version }}-
            poetry-

      - name: Install poetry
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        uses: abatilo/actions-poetry@v4

      - name: Add poetry to PATH
        if: steps.cache-poetry.outputs.cache-hit == 'true'
        run: |
          echo "/opt/pipx/venvs/poetry/bin" >> $GITHUB_PATH

      - name: Configure poetry
        run: |
          cd ./${{ matrix.service }}

          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local

      - name: Cache venv
        uses: actions/cache@v4
        with:
          path: ./${{ matrix.service }}/.venv
          key: venv-${{ hashFiles(format('{0}/poetry.lock', matrix.service)) }}
          restore-keys: |
            venv-

      - name: Hash service code
        id: hash
        run: |
          CODE_HASH=${{ hashFiles(format('{0}/**/*.py', matrix.service)) }}-${{ hashFiles(format('{0}/pyproject.toml', matrix.service)) }}-${{ hashFiles(format('{0}/poetry.lock', matrix.service)) }}
          echo "hash=$CODE_HASH" >> $GITHUB_OUTPUT

      - name: Cache mypy cache
        uses: actions/cache@v4
        with:
          path: ./${{ matrix.service }}/.mypy_cache
          key: mypy-cache-${{ steps.hash.outputs.hash }}
          restore-keys: |
            mypy-cache-

      - name: Cache ruff cache
        uses: actions/cache@v4
        with:
          path: ./${{ matrix.service }}/.ruff_cache
          key: ruff-cache-${{ steps.hash.outputs.hash }}
          restore-keys: |
            ruff-cache-

      - name: Install dependencies
        run: |
          cd ./${{ matrix.service }}

          make install

      - name: Run static tests
        run: |
          cd ./${{ matrix.service }}

          make static
          make format
          make lint

      - name: Run unit tests
        run: |
          cd ./${{ matrix.service }}

          make unit
        env:
          RSA_PRIVATE_KEY: ${{ secrets.RSA_PRIVATE_KEY_PEM }}
          PEM_PASSWORD_BYTES: ${{ secrets.RSA_PRIVATE_KEY_PEM_PASSWORD }}
          STRIPE_PUBLIC_KEY: ${{ secrets.STRIPE_PUBLIC_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: "nothing to see here"  # Placeholder since these are just tests
          ENVIRONMENT: "Testing"

      - name: Run tests and check coverage
        run: |
          cd ./${{ matrix.service }}

          make ci-test
          make check-coverage

        env:
          RSA_PRIVATE_KEY: ${{ secrets.RSA_PRIVATE_KEY_PEM }}
          PEM_PASSWORD_BYTES: ${{ secrets.RSA_PRIVATE_KEY_PEM_PASSWORD }}
          STRIPE_PUBLIC_KEY: ${{ secrets.STRIPE_PUBLIC_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: "nothing to see here"  # Placeholder since these are just tests
          ENVIRONMENT: "Testing"

  ci-build:
    name: Build module ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: ci-test
    strategy:
      matrix:
        service: [
          "backend-service",
        ]

    steps:
      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.REGISTRY_DOMAIN }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_AUTH_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: "{{ defaultContext }}:${{ matrix.service }}"
          push: true
          tags: ${{ secrets.REGISTRY_DOMAIN }}/${{ secrets.OCI_TENANCY_NAMESPACE }}/acompanhador-concurso/${{ matrix.service }}:latest
          cache-from: type=registry,ref=${{ secrets.REGISTRY_DOMAIN }}/${{ secrets.OCI_TENANCY_NAMESPACE }}/acompanhador-concurso/${{ matrix.service }}:latest
          cache-to: type=inline
